/**
 * @param {number} n
 * @return {number}
 */
var nthPersonGetsNthSeat = function(n) {
  return n === 1 ? 1 : 0.5;
};

/**
 * 思路：
 * 对于第1个乘客来说，他有三种选择
 * 1.坐在正确的位置，那么后面的乘客都不会乱，所以第n个乘客可以坐到自己的位置，概率为1/n * 1
 * 2.坐在第n个乘客的位置，那么第n个乘客肯定无法坐到自己的位置，概率为1/n * 0
 * 3.坐在[1, n-1]之间的某个位置K
 * 对于第K个乘客而言，自己的位置K已经被乘客1占了，而[2, K-1]的乘客先于自己上飞机，能找到自己的位置并坐下，
 * 所以当K乘客上飞机时候，留给自己的选择是1号乘客的座位，以及[K + 1, n]
 * 此时对K乘客来说，1号乘客的作为就是正确的作为，他与1号乘客面临的选择相同。只是可选范围从 N 下降到 N - K + 1
 * 有通项公式：
 * f(n) = 1/n * (1 + Σ(i=2...n-1)(f(n-i+1)))
 * 此时
 * f(n-1) = 1/(n-1) * (1 + Σ(i=2...n-2)(f(n-i)))
 * 两式相减可得
 * n*f(n) - (n-1)*f(n-1) = f(n-1)
 * f(n) = f(n-1) = ... = f(2) = 0.5
 * f(1) = 1;
 */
